version: '3'
services:

  discovery-service:
    container_name: discovery-service
    build:
      context: .
      dockerfile: discovery-service/Dockerfile
    ports:
      - "8761:8761"
    restart: always
    networks:
      - jcb

#  gateway-service:
#    container_name: gateway-service
#    build:
#      context: .
#      dockerfile: gateway-service/Dockerfile
#    ports:
#      - "8080:8080"
#    restart: always
#    networks:
#      - jcb
#    depends_on:
#      - discovery-service
#
#  auth-service:
#    container_name: auth-service
#    build:
#      context: .
#      dockerfile: auth-service/Dockerfile
#    ports:
#      - "8081:8081"
#    restart: always
#    networks:
#      - jcb
#      - redis-network

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    environment:
      - INSIGHT_WEB_PORT=8001
    networks:
      - redis-network
    command: [ "redis-server", "--appendonly", "yes" ]

  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDISINSIGHT_HOST=0.0.0.0
      - REDISINSIGHT_ACCEPT_LICENSE=true  # Accept EULA and Privacy Settings
    ports:
      - "5540:5540"
    volumes:
      - redisinsight-data:/db
    networks:
      - redis-network
    depends_on:
      - redis

  db:
    image: postgres:latest
    container_name: acc_db
    environment:
      POSTGRES_DB: acc_db
      POSTGRES_USER: acc
      POSTGRES_PASSWORD: acc
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U acc -d acc" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - data1:/var/lib/postgresql/data
    networks:
      - postgres

  db_cards:
    image: postgres:latest
    container_name: cards_db
    environment:
      POSTGRES_DB: cards_db
      POSTGRES_USER: acc
      POSTGRES_PASSWORD: acc
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U acc -d acc" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - data2:/var/lib/postgresql/data
    networks:
      - postgres

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin_acc_db
    depends_on:
      - db
    environment:
      PGADMIN_DEFAULT_EMAIL: "acc@acc.com"
      PGADMIN_DEFAULT_PASSWORD: "acc"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "5050:80"
    networks:
      - postgres

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - kafka-network

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - kafka-network

  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: always
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      SERVER_SERVLET_CONTEXT_PATH: /
    depends_on:
      - kafka
    networks:
      - kafka-network

networks:
  postgres:
    driver: bridge
  redis-network:
    driver: bridge
  jcb:
    driver: bridge
  kafka-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  redisinsight-data:
    driver: local
  data1:
  data2:
